{"version":3,"sources":["Component/InitState.js","Component/reducer.js","Component/Provider.js","Component/Actions.js","Component/AddJob.js","Component/Content.js","App.js","reportWebVitals.js","index.js"],"names":["InitState","JSON","parse","localStorage","getItem","isShowAdding","isShowEditing","jobEditId","levelInput","jobInput","searchInput","filterLevel","filterDone","isFilter","jobsTemp","jobs","id","name","level","done","setLocalData","state","setItem","stringify","reducer","action","finalState","filter","job","jobNameRes","toLowerCase","includes","jobLevelRes","jobDoneRes","type","payload","maxId","forEach","deletedJobs","Number","deletedTempJobs","editedJobs","filteredSearchJobs","filterLevelJobs","setDoneJobs","filteredJobs","filterDoneJobs","console","log","Error","Context","createContext","Provider","children","useReducer","dispatch","value","toggleAdding","toggleEditing","setJobInput","setLevelInput","AddJob","toast","configure","useContext","className","htmlFor","onChange","e","Actions","target","onClick","warning","position","POSITION","TOP_LEFT","autoClose","Content","jobList","placeholder","map","index","style","maxWidth","icon","faEdit","faTrashAlt","faCheck","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38e7f63d.chunk.js","sourcesContent":["import { useContext } from \"react\"\r\nimport { Context } from \"./Provider\"\r\n\r\nconst InitState = JSON.parse(localStorage.getItem('task')) || {\r\n    isShowAdding: false,\r\n    isShowEditing: false,\r\n    jobEditId: null,\r\n    levelInput: 'normal',\r\n    jobInput: '',\r\n    searchInput: '',\r\n    filterLevel: '',\r\n    filterDone: \"\",\r\n    isFilter: false,\r\n    jobsTemp: [],\r\n    jobs: [\r\n        {\r\n            id: 0,\r\n            name: 'Ăn cơm',\r\n            level: 'easy',\r\n            done: \"done\"\r\n        },\r\n        {\r\n            id: 1,\r\n            name: 'Đi học',\r\n            level: 'normal',\r\n            done: \"undone\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Làm bài tập',\r\n            level: 'hard',\r\n            done: \"done\"\r\n        }\r\n    ]\r\n}\r\n\r\nexport default InitState\r\n\r\nexport const setLocalData = (state) =>{\r\n    localStorage.setItem('task', JSON.stringify(state))\r\n}","import { setLocalData } from \"./InitState\"\r\n\r\nfunction reducer(state, action){\r\n    const filter = (job, searchInput, filterLevel, filterDone)=>{\r\n        let jobNameRes = searchInput===\"\" || job.name.toLowerCase().includes(searchInput)\r\n        let jobLevelRes = filterLevel===\"\" || job.level === filterLevel\r\n        let jobDoneRes = filterDone === \"\" || job.done === filterDone\r\n        return jobNameRes&&jobLevelRes&&jobDoneRes\r\n    }\r\n    let finalState\r\n    switch(action.type){\r\n        case 'toggle-adding':\r\n            return{\r\n                ...state,\r\n                isShowAdding: action.payload,\r\n                isShowEditing: action.payload?false:state.isShowEditing\r\n            }\r\n        case 'toggle-editing':\r\n            return{\r\n                ...state,\r\n                isShowEditing: action.payload,\r\n                isShowAdding: action.payload?false:state.isShowAdding\r\n            }\r\n        case 'set-job-input':\r\n            return{\r\n                ...state,\r\n                jobInput: action.payload\r\n            }\r\n        case 'set-level-input':\r\n            return{\r\n                ...state,\r\n                levelInput: action.payload\r\n            }\r\n        case 'add-job':\r\n            let maxId = 0\r\n            state.jobs.forEach((job)=>{\r\n                if(job.id > maxId) maxId = job.id\r\n            })\r\n            finalState = {\r\n                ...state,\r\n                isFilter: false,\r\n                searchInput: \"\",\r\n                filterLevel: \"\",\r\n                filterDone: \"\",\r\n                jobInput: \"\",\r\n                levelInput: \"normal\",\r\n                jobs: [...state.jobs, {id: maxId+1, name: state.jobInput, level: state.levelInput, done: \"undone\"}]\r\n            }\r\n            setLocalData(finalState)\r\n            return finalState\r\n        case 'delete-job':\r\n            let deletedJobs = state.jobs.filter(job=>{\r\n                return Number(job.id) !== action.payload\r\n            })\r\n            let deletedTempJobs = state.jobsTemp.filter(job=>{\r\n                return Number(job.id) !== action.payload\r\n            })\r\n            finalState = {\r\n                ...state,\r\n                jobs: [...deletedJobs],\r\n                jobsTemp: [...deletedTempJobs]\r\n            }\r\n            setLocalData(finalState)\r\n            return finalState\r\n        case 'set-job-edit':\r\n            return{\r\n                ...state,\r\n                jobEditId: action.payload\r\n            }\r\n        case 'edit-job':\r\n            let editedJobs = [...state.jobs]\r\n            editedJobs.forEach(job=>{\r\n                if(job.id === state.jobEditId){\r\n                    job.name = state.jobInput\r\n                    job.level = state.levelInput\r\n                    return\r\n                }\r\n            })\r\n            finalState = {\r\n                ...state,\r\n                jobs: [...editedJobs]\r\n            }\r\n            setLocalData(finalState)\r\n            return finalState\r\n        case 'set-search-input':\r\n            let filteredSearchJobs = []\r\n            filteredSearchJobs = state.jobs.filter(job=>{\r\n                return filter(job, action.payload, state.filterLevel, state.filterDone)\r\n            })\r\n            return{\r\n                ...state,\r\n                searchInput: action.payload,\r\n                isFilter: action.payload !==\"\" || state.filterLevel !== \"\" || state.filterDone !== \"\" ?true:false,\r\n                jobsTemp: [...filteredSearchJobs]\r\n            }\r\n        case 'set-filter-level':\r\n            let filterLevelJobs = []\r\n            filterLevelJobs = state.jobs.filter(job=>{\r\n                return filter(job, state.searchInput, action.payload, state.filterDone)\r\n            })\r\n            return{\r\n                ...state,\r\n                isFilter: state.searchInput !==\"\" || action.payload !== \"\" || state.filterDone !== \"\" ?true:false,\r\n                filterLevel: action.payload,\r\n                jobsTemp: [...filterLevelJobs]\r\n            }\r\n        case 'set-done':\r\n            let setDoneJobs = [...state.jobs]\r\n            setDoneJobs.forEach(job=>{\r\n                if(job.id === action.payload){\r\n                    job.done = \"done\"\r\n                    return\r\n                }\r\n            })\r\n            let filteredJobs = []\r\n            filteredJobs = setDoneJobs.filter(job=>{\r\n                return filter(job, state.searchInput, state.filterLevel, state.filterDone)\r\n            })\r\n            finalState = {\r\n                ...state,\r\n                jobs: [...setDoneJobs],\r\n                jobsTemp: [...filteredJobs]\r\n            }\r\n            setLocalData(finalState)\r\n            return finalState\r\n        case 'set-filter-done':\r\n            let filterDoneJobs = []\r\n            filterDoneJobs = state.jobs.filter(job=>{\r\n                console.log(filter(job, state.searchInput, state.filterLevel, action.payload))\r\n                return filter(job, state.searchInput, state.filterLevel, action.payload)\r\n            })\r\n            return{\r\n                ...state,\r\n                isFilter: state.searchInput !==\"\" || state.filterLevel !== \"\" || action.payload !== \"\" ?true:false,\r\n                filterDone: action.payload,\r\n                jobsTemp: [...filterDoneJobs]\r\n            }\r\n        \r\n        default:\r\n            throw new Error('Invalid action!!!')\r\n    }\r\n}\r\n\r\nexport default reducer","import InitState from \"./InitState\";\r\nimport reducer from './reducer'\r\nimport { createContext, useReducer } from \"react\";\r\n\r\nexport const Context = createContext()\r\nfunction Provider({children}){\r\n    const [state, dispatch] = useReducer(reducer, InitState)\r\n    return (\r\n        <Context.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport default Provider","export const toggleAdding = (payload) =>{\r\n    return{\r\n        type: 'toggle-adding',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const toggleEditing = (payload) =>{\r\n    return{\r\n        type: 'toggle-editing',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const setJobInput = (payload) =>{\r\n    return {\r\n        type: 'set-job-input',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const setLevelInput = (payload) =>{\r\n    return {\r\n        type: 'set-level-input',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const addJob = (payload) =>{\r\n    return {\r\n        type: 'add-job',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const deleteJob = (payload) =>{\r\n    return {\r\n        type: 'delete-job',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const setJobEdit = (payload) =>{\r\n    return {\r\n        type: 'set-job-edit',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const editJob = (payload) =>{\r\n    return {\r\n        type: 'edit-job',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const setSearchInput = (payload) =>{\r\n    return {\r\n        type: 'set-search-input',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const setFilterLevel = (payload) =>{\r\n    return {\r\n        type: 'set-filter-level',\r\n        payload\r\n    }\r\n}\r\n\r\n\r\nexport const setDone = (payload) =>{\r\n    return {\r\n        type: 'set-done',\r\n        payload\r\n    }\r\n}\r\n\r\nexport const setFilterDone = (payload) =>{\r\n    return {\r\n        type: 'set-filter-done',\r\n        payload\r\n    }\r\n}","import { useContext } from \"react\";\r\nimport { Context } from \"./Provider\";\r\nimport * as Actions from \"./Actions\";\r\nimport { toast } from \"react-toastify\"\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\n\r\nfunction AddJob() {\r\n  toast.configure()\r\n  const [state, dispatch] = useContext(Context);\r\n  const { isShowAdding, isShowEditing, jobInput, levelInput } = state;\r\n  return (\r\n    <div className=\"card p-3\">\r\n      <div className=\"card-header bg-warning text-white\">\r\n        {isShowAdding ? \"Thêm công việc\" : \"Sửa đổi công việc\"}\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <div>\r\n          <label htmlFor=\"name\" className=\"form-label\">\r\n            Tên công việc\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control txt-small\"\r\n            name=\"\"\r\n            id=\"name\"\r\n            value={jobInput}\r\n            onChange={(e) => dispatch(Actions.setJobInput(e.target.value))}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"type\" className=\"form-label\">\r\n            Phân loại\r\n          </label>\r\n          <select\r\n            onChange={(e) => dispatch(Actions.setLevelInput(e.target.value))}\r\n            value={levelInput}\r\n            className=\"form-control txt-small\"\r\n            name=\"\"\r\n            id=\"type\"\r\n          >\r\n            <optgroup className=\"txt-small\">\r\n              <option value=\"easy\">Đơn giản</option>\r\n              <option value=\"normal\">Bình thường</option>\r\n              <option value=\"hard\">Phức tạp</option>\r\n            </optgroup>\r\n          </select>\r\n        </div>\r\n        <div className=\"mt-4\">\r\n          <button\r\n            className=\"btn btn-warning text-white\"\r\n            onClick={() => {\r\n                if(jobInput===\"\")  toast.warning('Không được để trống công việc', {position: toast.POSITION.TOP_LEFT, autoClose: 2400})\r\n                else if(isShowAdding)dispatch(Actions.addJob())\r\n                else if(isShowEditing)dispatch(Actions.editJob())\r\n            }}\r\n          >\r\n            Lưu\r\n          </button>\r\n          <button\r\n            className=\"btn btn-danger text-white ms-3\"\r\n            onClick={() => {\r\n              if (isShowAdding) dispatch(Actions.toggleAdding(false));\r\n              else if (isShowEditing) dispatch(Actions.toggleEditing(false));\r\n            }}\r\n          >\r\n            Hủy\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddJob;\r\n","import { useContext } from \"react\";\r\nimport { Context } from \"./Provider\";\r\nimport * as Actions from \"./Actions\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Content() {\r\n  const [state, dispatch] = useContext(Context);\r\n  const {jobs, isFilter, jobsTemp, searchInput, filterLevel, filterDone} = state;\r\n  var jobList = isFilter?[...jobsTemp]:[...jobs]\r\n  return (\r\n    <>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col col-lg-4\">\r\n        </div>\r\n        <div className=\"col col-lg-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary w-100\"\r\n            onClick={() => {\r\n              dispatch(Actions.toggleAdding(true));\r\n            }}\r\n          >\r\n            Thêm Công Việc\r\n          </button>\r\n        </div>\r\n        <div className=\"col col-lg-4\">\r\n        </div>\r\n        \r\n      </div>\r\n      <div className=\"row\">\r\n        <table className=\"table table-bordered txt-small\">\r\n          <thead>\r\n            <tr>\r\n              <th>STT</th>\r\n              <th>Tên</th>\r\n              <th>Mức độ</th>\r\n              <th>Trạng thái</th>\r\n              <th>Hành động</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td></td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control txt-small\"\r\n                  placeholder=\"Nhập để tìm kiếm\"\r\n                  value={searchInput}\r\n                  onChange={(e)=>{dispatch(Actions.setSearchInput(e.target.value))}}\r\n                />\r\n              </td>\r\n              <td>\r\n                <select value={filterLevel} onChange={(e)=>{dispatch(Actions.setFilterLevel(e.target.value))}} className=\"form-control txt-small\" name=\"\" id=\"\">\r\n                  <optgroup className=\"txt-small\">\r\n                    <option value=\"\">Tất cả</option>\r\n                    <option value=\"easy\">Đơn giản</option>\r\n                    <option value=\"normal\">Bình thường</option>\r\n                    <option value=\"hard\">Phức tạp</option>\r\n                  </optgroup>\r\n                </select>\r\n              </td>\r\n              <td>\r\n                <select value={filterDone} onChange={(e)=>{dispatch(Actions.setFilterDone(e.target.value))}} className=\"form-control txt-small\" name=\"\" id=\"\">\r\n                    <optgroup className=\"txt-small\">\r\n                      <option value=\"\">Tất cả</option>\r\n                      <option value=\"done\">Hoàn thành</option>\r\n                      <option value=\"undone\">Chưa xong</option>\r\n                    </optgroup>\r\n                </select>\r\n              </td>\r\n              <td></td>\r\n            </tr>\r\n            {\r\n            jobList.map((job, index) => {\r\n              return (\r\n                <tr key={index}>\r\n                  <td>{index + 1}</td>\r\n                  <td style={{maxWidth: 200}}>{job.name}</td>\r\n                  <td>\r\n                    <span className={\"label label-\" + job.level}>\r\n                      {job.level === \"easy\"\r\n                        ? \"Đơn giản\"\r\n                        : job.level === \"normal\"\r\n                        ? \"Bình thường\"\r\n                        : \"Phức tạp\"}\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <span className={job.done===\"done\"?'icon-check':'icon-times'}>\r\n                      {job.done===\"done\"?<>&#10003;</>:<>&times;</>}\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <button\r\n                      className=\"btn btn-warning text-white\"\r\n                      onClick={() => {\r\n                        dispatch(Actions.toggleEditing(true));\r\n                        dispatch(Actions.setJobInput(job.name));\r\n                        dispatch(Actions.setLevelInput(job.level));\r\n                        dispatch(Actions.setJobEdit(job.id));\r\n                      }}\r\n                    >\r\n                      <FontAwesomeIcon icon={faEdit} className=\"me-1\" />\r\n                      Sửa\r\n                    </button>\r\n                    <button\r\n                      className=\"btn btn-danger text-white ms-3\"\r\n                      onClick={() => dispatch(Actions.deleteJob(job.id))}\r\n                    >\r\n                      <FontAwesomeIcon icon={faTrashAlt} className=\"me-1\" />\r\n                      Xóa\r\n                    </button>\r\n                    { job.done===\"undone\" && \r\n                      <button\r\n                        className=\"btn btn-primary text-white ms-3\"\r\n                        onClick={() => dispatch(Actions.setDone(job.id))}\r\n                      >\r\n                        <FontAwesomeIcon icon={faCheck} className=\"me-1\" />\r\n                        Xong\r\n                      </button>\r\n                    }\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import AddJob from './Component/AddJob';\nimport Content from './Component/Content';\nimport './App.css';\nimport { useContext } from 'react';\nimport { Context } from './Component/Provider';\n\nfunction App() {\n  var [state] = useContext(Context)\n  var {isShowAdding, isShowEditing} = state \n  return (\n      <div className=\"App\">\n          <div className=\"row\">\n            <div className={isShowAdding || isShowEditing?'col-lg-4':'d-lg-none'}>\n              <AddJob/>\n            </div>\n            <div className={isShowAdding || isShowEditing?'col-lg-8':'col-lg-12'}>\n              <Content/>\n            </div>\n          </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Provider from './Component/Provider'\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}